/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface TokenInterface extends utils.Interface {
  functions: {
    "CEX_RECEIVER()": FunctionFragment;
    "CEX_TOKENOMICS_PERCENT()": FunctionFragment;
    "LIQUIDITY_RECEIVER()": FunctionFragment;
    "LIQUIDITY_TOKENOMICS_PERCENT()": FunctionFragment;
    "MARKETING_RECEIVER()": FunctionFragment;
    "MARKETING_TOKENOMICS_PERCENT()": FunctionFragment;
    "PRESALE_RECEIVER()": FunctionFragment;
    "PRESALE_TOKENOMICS_PERCENT()": FunctionFragment;
    "RESEARCH_RECEIVER()": FunctionFragment;
    "RESEARCH_TOKENOMICS_PERCENT()": FunctionFragment;
    "SEED_RECEIVER()": FunctionFragment;
    "SEED_TOKENOMICS_PERCENT()": FunctionFragment;
    "STACKING_RECEIVER()": FunctionFragment;
    "STACKING_TOKENOMICS_PERCENT()": FunctionFragment;
    "TAX_RECEIVER()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "changeTaxRate(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "symbol()": FunctionFragment;
    "taxRate()": FunctionFragment;
    "tokenomicsTransfer()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CEX_RECEIVER"
      | "CEX_TOKENOMICS_PERCENT"
      | "LIQUIDITY_RECEIVER"
      | "LIQUIDITY_TOKENOMICS_PERCENT"
      | "MARKETING_RECEIVER"
      | "MARKETING_TOKENOMICS_PERCENT"
      | "PRESALE_RECEIVER"
      | "PRESALE_TOKENOMICS_PERCENT"
      | "RESEARCH_RECEIVER"
      | "RESEARCH_TOKENOMICS_PERCENT"
      | "SEED_RECEIVER"
      | "SEED_TOKENOMICS_PERCENT"
      | "STACKING_RECEIVER"
      | "STACKING_TOKENOMICS_PERCENT"
      | "TAX_RECEIVER"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "changeTaxRate"
      | "decimals"
      | "decreaseAllowance"
      | "increaseAllowance"
      | "name"
      | "owner"
      | "renounceOwnership"
      | "symbol"
      | "taxRate"
      | "tokenomicsTransfer"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CEX_RECEIVER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CEX_TOKENOMICS_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDITY_RECEIVER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDITY_TOKENOMICS_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MARKETING_RECEIVER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MARKETING_TOKENOMICS_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRESALE_RECEIVER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRESALE_TOKENOMICS_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESEARCH_RECEIVER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESEARCH_TOKENOMICS_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SEED_RECEIVER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SEED_TOKENOMICS_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STACKING_RECEIVER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STACKING_TOKENOMICS_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TAX_RECEIVER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTaxRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "taxRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenomicsTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "CEX_RECEIVER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CEX_TOKENOMICS_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDITY_RECEIVER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDITY_TOKENOMICS_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MARKETING_RECEIVER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MARKETING_TOKENOMICS_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRESALE_RECEIVER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRESALE_TOKENOMICS_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESEARCH_RECEIVER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESEARCH_TOKENOMICS_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SEED_RECEIVER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SEED_TOKENOMICS_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STACKING_RECEIVER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STACKING_TOKENOMICS_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TAX_RECEIVER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeTaxRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenomicsTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TaxRateChanged(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaxRateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TaxRateChangedEventObject {
  newRate: BigNumber;
}
export type TaxRateChangedEvent = TypedEvent<
  [BigNumber],
  TaxRateChangedEventObject
>;

export type TaxRateChangedEventFilter = TypedEventFilter<TaxRateChangedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Token extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CEX_RECEIVER(overrides?: CallOverrides): Promise<[string]>;

    CEX_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    LIQUIDITY_RECEIVER(overrides?: CallOverrides): Promise<[string]>;

    LIQUIDITY_TOKENOMICS_PERCENT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MARKETING_RECEIVER(overrides?: CallOverrides): Promise<[string]>;

    MARKETING_TOKENOMICS_PERCENT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PRESALE_RECEIVER(overrides?: CallOverrides): Promise<[string]>;

    PRESALE_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    RESEARCH_RECEIVER(overrides?: CallOverrides): Promise<[string]>;

    RESEARCH_TOKENOMICS_PERCENT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    SEED_RECEIVER(overrides?: CallOverrides): Promise<[string]>;

    SEED_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    STACKING_RECEIVER(overrides?: CallOverrides): Promise<[string]>;

    STACKING_TOKENOMICS_PERCENT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    TAX_RECEIVER(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeTaxRate(
      newRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    taxRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenomicsTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CEX_RECEIVER(overrides?: CallOverrides): Promise<string>;

  CEX_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  LIQUIDITY_RECEIVER(overrides?: CallOverrides): Promise<string>;

  LIQUIDITY_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  MARKETING_RECEIVER(overrides?: CallOverrides): Promise<string>;

  MARKETING_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  PRESALE_RECEIVER(overrides?: CallOverrides): Promise<string>;

  PRESALE_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  RESEARCH_RECEIVER(overrides?: CallOverrides): Promise<string>;

  RESEARCH_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  SEED_RECEIVER(overrides?: CallOverrides): Promise<string>;

  SEED_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  STACKING_RECEIVER(overrides?: CallOverrides): Promise<string>;

  STACKING_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  TAX_RECEIVER(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeTaxRate(
    newRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  taxRate(overrides?: CallOverrides): Promise<BigNumber>;

  tokenomicsTransfer(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CEX_RECEIVER(overrides?: CallOverrides): Promise<string>;

    CEX_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDITY_RECEIVER(overrides?: CallOverrides): Promise<string>;

    LIQUIDITY_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    MARKETING_RECEIVER(overrides?: CallOverrides): Promise<string>;

    MARKETING_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_RECEIVER(overrides?: CallOverrides): Promise<string>;

    PRESALE_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    RESEARCH_RECEIVER(overrides?: CallOverrides): Promise<string>;

    RESEARCH_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    SEED_RECEIVER(overrides?: CallOverrides): Promise<string>;

    SEED_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    STACKING_RECEIVER(overrides?: CallOverrides): Promise<string>;

    STACKING_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    TAX_RECEIVER(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeTaxRate(
      newRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    taxRate(overrides?: CallOverrides): Promise<BigNumber>;

    tokenomicsTransfer(overrides?: CallOverrides): Promise<boolean>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TaxRateChanged(uint256)"(newRate?: null): TaxRateChangedEventFilter;
    TaxRateChanged(newRate?: null): TaxRateChangedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    CEX_RECEIVER(overrides?: CallOverrides): Promise<BigNumber>;

    CEX_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDITY_RECEIVER(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDITY_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    MARKETING_RECEIVER(overrides?: CallOverrides): Promise<BigNumber>;

    MARKETING_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_RECEIVER(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    RESEARCH_RECEIVER(overrides?: CallOverrides): Promise<BigNumber>;

    RESEARCH_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    SEED_RECEIVER(overrides?: CallOverrides): Promise<BigNumber>;

    SEED_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    STACKING_RECEIVER(overrides?: CallOverrides): Promise<BigNumber>;

    STACKING_TOKENOMICS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    TAX_RECEIVER(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeTaxRate(
      newRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    taxRate(overrides?: CallOverrides): Promise<BigNumber>;

    tokenomicsTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CEX_RECEIVER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CEX_TOKENOMICS_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIQUIDITY_RECEIVER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIQUIDITY_TOKENOMICS_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MARKETING_RECEIVER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MARKETING_TOKENOMICS_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRESALE_RECEIVER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRESALE_TOKENOMICS_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RESEARCH_RECEIVER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RESEARCH_TOKENOMICS_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SEED_RECEIVER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SEED_TOKENOMICS_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    STACKING_RECEIVER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STACKING_TOKENOMICS_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TAX_RECEIVER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeTaxRate(
      newRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenomicsTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
