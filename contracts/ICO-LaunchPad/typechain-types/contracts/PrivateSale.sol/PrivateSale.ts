/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface PrivateSaleInterface extends utils.Interface {
  functions: {
    "claimTokens()": FunctionFragment;
    "claimedTokens(address)": FunctionFragment;
    "contribute(address)": FunctionFragment;
    "contributions(address)": FunctionFragment;
    "currentRate()": FunctionFragment;
    "icoActive()": FunctionFragment;
    "icoEndTime()": FunctionFragment;
    "icoStartTime()": FunctionFragment;
    "maxContribution()": FunctionFragment;
    "owner()": FunctionFragment;
    "projectToken()": FunctionFragment;
    "startICO(uint256)": FunctionFragment;
    "stopICO()": FunctionFragment;
    "totalContributions()": FunctionFragment;
    "totalParticipations()": FunctionFragment;
    "updateWhitelist(address[],bool[])": FunctionFragment;
    "whitelist(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimTokens"
      | "claimedTokens"
      | "contribute"
      | "contributions"
      | "currentRate"
      | "icoActive"
      | "icoEndTime"
      | "icoStartTime"
      | "maxContribution"
      | "owner"
      | "projectToken"
      | "startICO"
      | "stopICO"
      | "totalContributions"
      | "totalParticipations"
      | "updateWhitelist"
      | "whitelist"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimedTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contributions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "icoActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "icoEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "icoStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxContribution",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "projectToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startICO",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "stopICO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalContributions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalParticipations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhitelist",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "icoActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "icoEndTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "icoStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startICO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopICO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalParticipations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Contribution(address,uint256,uint256)": EventFragment;
    "ICOStarted(uint256,uint256)": EventFragment;
    "ICOStopped()": EventFragment;
    "TokensClaimed(address,uint256)": EventFragment;
    "WhitelistUpdated(address[],bool[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Contribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ICOStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ICOStopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistUpdated"): EventFragment;
}

export interface ContributionEventObject {
  contributor: string;
  amount: BigNumber;
  currentRate: BigNumber;
}
export type ContributionEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ContributionEventObject
>;

export type ContributionEventFilter = TypedEventFilter<ContributionEvent>;

export interface ICOStartedEventObject {
  startTime: BigNumber;
  endTime: BigNumber;
}
export type ICOStartedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ICOStartedEventObject
>;

export type ICOStartedEventFilter = TypedEventFilter<ICOStartedEvent>;

export interface ICOStoppedEventObject {}
export type ICOStoppedEvent = TypedEvent<[], ICOStoppedEventObject>;

export type ICOStoppedEventFilter = TypedEventFilter<ICOStoppedEvent>;

export interface TokensClaimedEventObject {
  contributor: string;
  amount: BigNumber;
}
export type TokensClaimedEvent = TypedEvent<
  [string, BigNumber],
  TokensClaimedEventObject
>;

export type TokensClaimedEventFilter = TypedEventFilter<TokensClaimedEvent>;

export interface WhitelistUpdatedEventObject {
  addresses: string[];
  statuses: boolean[];
}
export type WhitelistUpdatedEvent = TypedEvent<
  [string[], boolean[]],
  WhitelistUpdatedEventObject
>;

export type WhitelistUpdatedEventFilter =
  TypedEventFilter<WhitelistUpdatedEvent>;

export interface PrivateSale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PrivateSaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    contribute(
      referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contributions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    icoActive(overrides?: CallOverrides): Promise<[boolean]>;

    icoEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    icoStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxContribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    projectToken(overrides?: CallOverrides): Promise<[string]>;

    startICO(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stopICO(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalContributions(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalParticipations(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateWhitelist(
      _addresses: PromiseOrValue<string>[],
      _statuses: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimTokens(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimedTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  contribute(
    referrer: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contributions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentRate(overrides?: CallOverrides): Promise<BigNumber>;

  icoActive(overrides?: CallOverrides): Promise<boolean>;

  icoEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  icoStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  maxContribution(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  projectToken(overrides?: CallOverrides): Promise<string>;

  startICO(
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stopICO(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalContributions(overrides?: CallOverrides): Promise<BigNumber>;

  totalParticipations(overrides?: CallOverrides): Promise<BigNumber>;

  updateWhitelist(
    _addresses: PromiseOrValue<string>[],
    _statuses: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelist(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimTokens(overrides?: CallOverrides): Promise<void>;

    claimedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contribute(
      referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    contributions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRate(overrides?: CallOverrides): Promise<BigNumber>;

    icoActive(overrides?: CallOverrides): Promise<boolean>;

    icoEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    icoStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    maxContribution(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    projectToken(overrides?: CallOverrides): Promise<string>;

    startICO(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stopICO(overrides?: CallOverrides): Promise<void>;

    totalContributions(overrides?: CallOverrides): Promise<BigNumber>;

    totalParticipations(overrides?: CallOverrides): Promise<BigNumber>;

    updateWhitelist(
      _addresses: PromiseOrValue<string>[],
      _statuses: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Contribution(address,uint256,uint256)"(
      contributor?: PromiseOrValue<string> | null,
      amount?: null,
      currentRate?: null
    ): ContributionEventFilter;
    Contribution(
      contributor?: PromiseOrValue<string> | null,
      amount?: null,
      currentRate?: null
    ): ContributionEventFilter;

    "ICOStarted(uint256,uint256)"(
      startTime?: null,
      endTime?: null
    ): ICOStartedEventFilter;
    ICOStarted(startTime?: null, endTime?: null): ICOStartedEventFilter;

    "ICOStopped()"(): ICOStoppedEventFilter;
    ICOStopped(): ICOStoppedEventFilter;

    "TokensClaimed(address,uint256)"(
      contributor?: PromiseOrValue<string> | null,
      amount?: null
    ): TokensClaimedEventFilter;
    TokensClaimed(
      contributor?: PromiseOrValue<string> | null,
      amount?: null
    ): TokensClaimedEventFilter;

    "WhitelistUpdated(address[],bool[])"(
      addresses?: null,
      statuses?: null
    ): WhitelistUpdatedEventFilter;
    WhitelistUpdated(
      addresses?: null,
      statuses?: null
    ): WhitelistUpdatedEventFilter;
  };

  estimateGas: {
    claimTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contribute(
      referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contributions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRate(overrides?: CallOverrides): Promise<BigNumber>;

    icoActive(overrides?: CallOverrides): Promise<BigNumber>;

    icoEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    icoStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    maxContribution(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    projectToken(overrides?: CallOverrides): Promise<BigNumber>;

    startICO(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stopICO(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalContributions(overrides?: CallOverrides): Promise<BigNumber>;

    totalParticipations(overrides?: CallOverrides): Promise<BigNumber>;

    updateWhitelist(
      _addresses: PromiseOrValue<string>[],
      _statuses: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contribute(
      referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contributions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    icoActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    icoEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    icoStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxContribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startICO(
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stopICO(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalContributions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalParticipations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateWhitelist(
      _addresses: PromiseOrValue<string>[],
      _statuses: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
