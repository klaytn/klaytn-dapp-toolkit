/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  PrivateSale,
  PrivateSaleInterface,
} from "../../../contracts/PrivateSale.sol/PrivateSale";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_projectToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_maxContribution",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "contributor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "currentRate",
        type: "uint256",
      },
    ],
    name: "Contribution",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
    ],
    name: "ICOStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "ICOStopped",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "contributor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "addresses",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "bool[]",
        name: "statuses",
        type: "bool[]",
      },
    ],
    name: "WhitelistUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "claimTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claimedTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "referrer",
        type: "address",
      },
    ],
    name: "contribute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "contributions",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "icoActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "icoEndTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "icoStartTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxContribution",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "projectToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_duration",
        type: "uint256",
      },
    ],
    name: "startICO",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stopICO",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalContributions",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalParticipations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_addresses",
        type: "address[]",
      },
      {
        internalType: "bool[]",
        name: "_statuses",
        type: "bool[]",
      },
    ],
    name: "updateWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "whitelist",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60803461008d57601f610f4b38819003918201601f19168301916001600160401b0383118484101761009257808492604094855283398101031261008d5780516001600160a01b038116919082900361008d5760200151906000600655600060075560018060a01b0319338160005416176000556001541617600155600555604051610ea290816100a98239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c9182632aa073c514610c41575081632ec17f4a14610c2257816333320de3146109bb57816337c089231461099c578382633ccfd60b146109205750816342e94c90146108e857816348c54b9d146106c65781634b60ce771461069d57816373e888fd146103285781637e1055b6146103095781638d3d6576146102ea5781638da5cb5b146102c257816398180dde1461020a5781639b19251a146101cc578163a7c3d71b146101ad578163a960c65f1461016f578163c8e569a81461010e575063f9f8bdb7146100ed57600080fd5b3461010a578160031936011261010a576020906008549051908152f35b5080fd5b83903461010a578160031936011261010a5761013460018060a01b038354163314610ccb565b805461014260ff8216610d33565b60ff191690557f9365811bcb2444e2c0cf0654bed4eaf8616a5f40f95acf29974de2cfac03b5478180a180f35b50503461010a57602036600319011261010a5760209160ff9082906001600160a01b0361019a610cb0565b168152600a855220541690519015158152f35b50503461010a578160031936011261010a576020906002549051908152f35b50503461010a57602036600319011261010a5760209160ff9082906001600160a01b036101f7610cb0565b168152600b855220541690519015158152f35b83833461010a57602036600319011261010a5761023160018060a01b038354163314610ccb565b825460ff811661028a577f93f5ddf26d5ba0f3a210d4a367f3a45bc4a87802981b2e5f9e65b8c09b0bb9e7929342600255600161026f823542610d10565b928360035560ff19161790558151904282526020820152a180f35b815162461bcd60e51b8152602081860152601260248201527149434f20616c72656164792061637469766560701b6044820152606490fd5b50503461010a578160031936011261010a57905490516001600160a01b039091168152602090f35b50503461010a578160031936011261010a576020906005549051908152f35b50503461010a578160031936011261010a576020906003549051908152f35b91602091503660031901821361069957610340610cb0565b338552600b835261035660ff8387205416610d70565b338552600983528185205461066157600554341161061f5761037b60ff855416610d33565b60025442101580610613575b156105dc573415610587576001600160a01b039081169333851461053957600534023481046005036105265760649004913387526009855234848820556103d034600754610d10565b9081600755600654600181018091116105135760065560015485516370a0823160e01b8152308582015291879183916024918391165afa9081156105095788916104d8575b5081156104c557046008558582868282156104bc575b839283928392f115610479575060085482519334855281818601527f5f7675b09617d2c9fa4fd13058ee5877a9538f626b0308816736e83748a450409485853392a28351928352820152a280f35b825162461bcd60e51b8152908101849052601e60248201527f526566657272616c20626f6e7573207472616e73666572206661696c656400006044820152606490fd5b506108fc61042b565b634e487b7160e01b885260128352602488fd5b90508581813d8311610502575b6104ef8183610c60565b810103126104fe575138610415565b8780fd5b503d6104e5565b85513d8a823e3d90fd5b634e487b7160e01b895260118452602489fd5b634e487b7160e01b875260118252602487fd5b825162461bcd60e51b8152908101849052602260248201527f52656665727265722063616e6e6f742062652074686520636f6e74726962757460448201526137b960f11b6064820152608490fd5b505162461bcd60e51b815291820152602a60248201527f436f6e747269627574696f6e20616d6f756e74206d75737420626520677265616044820152690746572207468616e20360b41b606482015260849150fd5b505162461bcd60e51b815291820152601260248201527149434f206973206e6f74206f6e676f696e6760701b604482015260649150fd5b50600354421115610387565b505162461bcd60e51b815291820152601c60248201527f45786365656473206d6178696d756d20636f6e747269627574696f6e00000000604482015260649150fd5b505162461bcd60e51b8152918201526013602482015272105b1c9958591e4818dbdb9d1c9a589d5d1959606a1b604482015260649150fd5b8380fd5b50503461010a578160031936011261010a5760015490516001600160a01b039091168152602090f35b919050346108e457826003193601126108e457338352602090600b82526106f260ff8286205416610d70565b338452600a825260ff81852054166108aa5760ff8354161561071381610dbc565b801561089f575b61072390610dfe565b338452600982528084205415610866573384526009825280842054926008549384810294818604149015171561085357338552600a8352818520600160ff19825416179055848360018060a01b0360015416604485518094819363a9059cbb60e01b835233888401528a60248401525af190811561084957869161080f575b50156107d65750907f896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e43091519283523392a280f35b82606492519162461bcd60e51b83528201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152fd5b90508381813d8311610842575b6108268183610c60565b8101031261083e5751801515810361083e57386107a2565b8580fd5b503d61081c565b83513d88823e3d90fd5b634e487b7160e01b855260119052602484fd5b5162461bcd60e51b8152918201526015602482015274139bc818dbdb9d1c9a589d5d1a5bdb88199bdd5b99605a1b604482015260649150fd5b50600354421161071a565b5162461bcd60e51b8152918201526016602482015275151bdad95b9cc8185b1c9958591e4818db185a5b595960521b604482015260649150fd5b8280fd5b50503461010a57602036600319011261010a5760209181906001600160a01b03610910610cb0565b1681526009845220549051908152f35b91503461010a578160031936011261010a578180809260ff60018060a01b038354169161094e833314610ccb565b54161561095a81610dbc565b8015610991575b61096a90610dfe565b4790828215610988575bf11561097e575080f35b51903d90823e3d90fd5b506108fc610974565b506003544211610961565b50503461010a578160031936011261010a576020906007549051908152f35b90508234610c1f5782600319360112610c1f5781359167ffffffffffffffff8084116108e457366023850112156108e45783820135946109fa86610c98565b91610a0782519384610c60565b86835260209081840196876024809a60051b83010191368311610c1b578a01905b828210610bfc57505050873590811161083e573660238201121561083e578085013590610a5482610c98565b90610a6185519283610c60565b8282528382018a819460051b83010191368311610bf8578b01905b828210610bdc57505087546001600160a01b03939150610a9f9084163314610ccb565b8551825103610ba157875b8651811015610b0657610abd8184610e42565b51151584610acb838a610e42565b51168a52600b8652868a209060ff801983541691161790556000198114610af457600101610aaa565b634e487b7160e01b8952601188528a89fd5b50949550908792938051968188019188525180915260608701939188905b828210610b88575050505084820385840152518082529082019291855b828110610b7257867faa9b4ef90f4ce69eff58dfa82ee849c9d5063df771c1320a024b5a9fb672254387870388a180f35b8351151585529381019392810192600101610b41565b8351811686529486019492860192600190910190610b24565b845162461bcd60e51b81528088018590526016818c015275082e4e4c2f2e640d8cadccee8d040dad2e6dac2e8c6d60531b6044820152606490fd5b81358015158103610bf4578152908501908501610a7c565b8a80fd5b8980fd5b81356001600160a01b0381168103610bf8578152908401908401610a28565b8880fd5b80fd5b50503461010a578160031936011261010a576020906006549051908152f35b8434610c1f5780600319360112610c1f575060ff602092541615158152f35b90601f8019910116810190811067ffffffffffffffff821117610c8257604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610c825760051b60200190565b600435906001600160a01b0382168203610cc657565b600080fd5b15610cd257565b60405162461bcd60e51b81526020600482015260166024820152752737ba103a34329031b7b73a3930b1ba1037bbb732b960511b6044820152606490fd5b91908201809211610d1d57565b634e487b7160e01b600052601160045260246000fd5b15610d3a57565b60405162461bcd60e51b815260206004820152600e60248201526d49434f206e6f742061637469766560901b6044820152606490fd5b15610d7757565b60405162461bcd60e51b815260206004820152601760248201527f41646472657373206e6f742077686974656c69737465640000000000000000006044820152606490fd5b15610dc357565b60405162461bcd60e51b815260206004820152601360248201527249434f206973207374696c6c2061637469766560681b6044820152606490fd5b15610e0557565b60405162461bcd60e51b81526020600482015260156024820152741250d3c81a185cc81b9bdd08195b991959081e595d605a1b6044820152606490fd5b8051821015610e565760209160051b010190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220b90685623a259d718cb1ea361704f3907c29e831785141a24c948fadc39937fc64736f6c63430008120033";

type PrivateSaleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PrivateSaleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PrivateSale__factory extends ContractFactory {
  constructor(...args: PrivateSaleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _projectToken: PromiseOrValue<string>,
    _maxContribution: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PrivateSale> {
    return super.deploy(
      _projectToken,
      _maxContribution,
      overrides || {}
    ) as Promise<PrivateSale>;
  }
  override getDeployTransaction(
    _projectToken: PromiseOrValue<string>,
    _maxContribution: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _projectToken,
      _maxContribution,
      overrides || {}
    );
  }
  override attach(address: string): PrivateSale {
    return super.attach(address) as PrivateSale;
  }
  override connect(signer: Signer): PrivateSale__factory {
    return super.connect(signer) as PrivateSale__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PrivateSaleInterface {
    return new utils.Interface(_abi) as PrivateSaleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PrivateSale {
    return new Contract(address, _abi, signerOrProvider) as PrivateSale;
  }
}
