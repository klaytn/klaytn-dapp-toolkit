/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace GovernorFactory {
  export type TimelockInitializeParamsStruct = {
    timelockMinDelay: PromiseOrValue<BigNumberish>;
    timelockProposers: PromiseOrValue<string>[];
    timelockExecutors: PromiseOrValue<string>[];
    timelockAdmin: PromiseOrValue<string>;
  };

  export type TimelockInitializeParamsStructOutput = [
    BigNumber,
    string[],
    string[],
    string
  ] & {
    timelockMinDelay: BigNumber;
    timelockProposers: string[];
    timelockExecutors: string[];
    timelockAdmin: string;
  };
}

export interface GovernorFactoryInterface extends utils.Interface {
  functions: {
    "addGovernorPreset(string,address)": FunctionFragment;
    "addVoteTokenPreset(string,address)": FunctionFragment;
    "createGovernor(string,bytes,string,bytes,(uint256,address[],address[],address),bytes32)": FunctionFragment;
    "getAllGovernorPresets()": FunctionFragment;
    "getAllVoteTokenPresets()": FunctionFragment;
    "getGovernorPresetAddress(string)": FunctionFragment;
    "getVoteTokenPresetAddress(string)": FunctionFragment;
    "governors(uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "initializeGovernor()": FunctionFragment;
    "owner()": FunctionFragment;
    "predictGovernorDeterministicAddress(string,bytes32)": FunctionFragment;
    "predictTimelockDeterministicAddress(bytes32)": FunctionFragment;
    "predictVoteTokenDeterministicAddress(string,bytes32)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "timelockController()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addGovernorPreset"
      | "addVoteTokenPreset"
      | "createGovernor"
      | "getAllGovernorPresets"
      | "getAllVoteTokenPresets"
      | "getGovernorPresetAddress"
      | "getVoteTokenPresetAddress"
      | "governors"
      | "initialize"
      | "initializeGovernor"
      | "owner"
      | "predictGovernorDeterministicAddress"
      | "predictTimelockDeterministicAddress"
      | "predictVoteTokenDeterministicAddress"
      | "proxiableUUID"
      | "renounceOwnership"
      | "timelockController"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addGovernorPreset",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addVoteTokenPreset",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGovernor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      GovernorFactory.TimelockInitializeParamsStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllGovernorPresets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllVoteTokenPresets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernorPresetAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteTokenPresetAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "governors",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "predictGovernorDeterministicAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "predictTimelockDeterministicAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "predictVoteTokenDeterministicAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timelockController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addGovernorPreset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVoteTokenPreset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllGovernorPresets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllVoteTokenPresets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernorPresetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteTokenPresetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictGovernorDeterministicAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictTimelockDeterministicAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictVoteTokenDeterministicAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "GovernorCreated(uint256,address,address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface GovernorCreatedEventObject {
  id: BigNumber;
  governor: string;
  voteToken: string;
  timelock: string;
}
export type GovernorCreatedEvent = TypedEvent<
  [BigNumber, string, string, string],
  GovernorCreatedEventObject
>;

export type GovernorCreatedEventFilter = TypedEventFilter<GovernorCreatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface GovernorFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernorFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addGovernorPreset(
      _name: PromiseOrValue<string>,
      _governorPreset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addVoteTokenPreset(
      _name: PromiseOrValue<string>,
      _voteTokenPresets: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGovernor(
      _governorPreset: PromiseOrValue<string>,
      _governorInitializeData: PromiseOrValue<BytesLike>,
      _voteTokenPreset: PromiseOrValue<string>,
      _voteTokenInitializeData: PromiseOrValue<BytesLike>,
      _timelockParams: GovernorFactory.TimelockInitializeParamsStruct,
      salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllGovernorPresets(overrides?: CallOverrides): Promise<[string[]]>;

    getAllVoteTokenPresets(overrides?: CallOverrides): Promise<[string[]]>;

    getGovernorPresetAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVoteTokenPresetAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    governors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        governor: string;
        voteToken: string;
        timelock: string;
      }
    >;

    initialize(
      _timelockController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initializeGovernor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    predictGovernorDeterministicAddress(
      _governorPreset: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    predictTimelockDeterministicAddress(
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    predictVoteTokenDeterministicAddress(
      _voteTokenPreset: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timelockController(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addGovernorPreset(
    _name: PromiseOrValue<string>,
    _governorPreset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addVoteTokenPreset(
    _name: PromiseOrValue<string>,
    _voteTokenPresets: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGovernor(
    _governorPreset: PromiseOrValue<string>,
    _governorInitializeData: PromiseOrValue<BytesLike>,
    _voteTokenPreset: PromiseOrValue<string>,
    _voteTokenInitializeData: PromiseOrValue<BytesLike>,
    _timelockParams: GovernorFactory.TimelockInitializeParamsStruct,
    salt: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllGovernorPresets(overrides?: CallOverrides): Promise<string[]>;

  getAllVoteTokenPresets(overrides?: CallOverrides): Promise<string[]>;

  getGovernorPresetAddress(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoteTokenPresetAddress(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  governors(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      governor: string;
      voteToken: string;
      timelock: string;
    }
  >;

  initialize(
    _timelockController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initializeGovernor(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  predictGovernorDeterministicAddress(
    _governorPreset: PromiseOrValue<string>,
    _salt: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  predictTimelockDeterministicAddress(
    _salt: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  predictVoteTokenDeterministicAddress(
    _voteTokenPreset: PromiseOrValue<string>,
    _salt: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timelockController(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addGovernorPreset(
      _name: PromiseOrValue<string>,
      _governorPreset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addVoteTokenPreset(
      _name: PromiseOrValue<string>,
      _voteTokenPresets: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createGovernor(
      _governorPreset: PromiseOrValue<string>,
      _governorInitializeData: PromiseOrValue<BytesLike>,
      _voteTokenPreset: PromiseOrValue<string>,
      _voteTokenInitializeData: PromiseOrValue<BytesLike>,
      _timelockParams: GovernorFactory.TimelockInitializeParamsStruct,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        governor: string;
        voteToken: string;
        timelock: string;
      }
    >;

    getAllGovernorPresets(overrides?: CallOverrides): Promise<string[]>;

    getAllVoteTokenPresets(overrides?: CallOverrides): Promise<string[]>;

    getGovernorPresetAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoteTokenPresetAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    governors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        governor: string;
        voteToken: string;
        timelock: string;
      }
    >;

    initialize(
      _timelockController: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeGovernor(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    predictGovernorDeterministicAddress(
      _governorPreset: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    predictTimelockDeterministicAddress(
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    predictVoteTokenDeterministicAddress(
      _voteTokenPreset: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    timelockController(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "GovernorCreated(uint256,address,address,address)"(
      id?: null,
      governor?: null,
      voteToken?: null,
      timelock?: null
    ): GovernorCreatedEventFilter;
    GovernorCreated(
      id?: null,
      governor?: null,
      voteToken?: null,
      timelock?: null
    ): GovernorCreatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    addGovernorPreset(
      _name: PromiseOrValue<string>,
      _governorPreset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addVoteTokenPreset(
      _name: PromiseOrValue<string>,
      _voteTokenPresets: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGovernor(
      _governorPreset: PromiseOrValue<string>,
      _governorInitializeData: PromiseOrValue<BytesLike>,
      _voteTokenPreset: PromiseOrValue<string>,
      _voteTokenInitializeData: PromiseOrValue<BytesLike>,
      _timelockParams: GovernorFactory.TimelockInitializeParamsStruct,
      salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllGovernorPresets(overrides?: CallOverrides): Promise<BigNumber>;

    getAllVoteTokenPresets(overrides?: CallOverrides): Promise<BigNumber>;

    getGovernorPresetAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteTokenPresetAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _timelockController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initializeGovernor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    predictGovernorDeterministicAddress(
      _governorPreset: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    predictTimelockDeterministicAddress(
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    predictVoteTokenDeterministicAddress(
      _voteTokenPreset: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timelockController(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addGovernorPreset(
      _name: PromiseOrValue<string>,
      _governorPreset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addVoteTokenPreset(
      _name: PromiseOrValue<string>,
      _voteTokenPresets: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGovernor(
      _governorPreset: PromiseOrValue<string>,
      _governorInitializeData: PromiseOrValue<BytesLike>,
      _voteTokenPreset: PromiseOrValue<string>,
      _voteTokenInitializeData: PromiseOrValue<BytesLike>,
      _timelockParams: GovernorFactory.TimelockInitializeParamsStruct,
      salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllGovernorPresets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllVoteTokenPresets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGovernorPresetAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoteTokenPresetAddress(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governors(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _timelockController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initializeGovernor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    predictGovernorDeterministicAddress(
      _governorPreset: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    predictTimelockDeterministicAddress(
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    predictVoteTokenDeterministicAddress(
      _voteTokenPreset: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timelockController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
