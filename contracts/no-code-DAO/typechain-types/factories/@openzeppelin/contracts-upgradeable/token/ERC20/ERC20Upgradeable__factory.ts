/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ERC20Upgradeable,
  ERC20UpgradeableInterface,
} from "../../../../../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523461001a57604051610a756100208239610a7590f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806306fdde03146100c2578063095ea7b3146100bd57806318160ddd146100b857806323b872dd146100b3578063313ce567146100ae57806339509351146100a957806370a08231146100a457806395d89b411461009f578063a457c2d71461009a578063a9059cbb146100955763dd62ed3e036100d25761036a565b61032b565b61030f565b6102f4565b6102d9565b6102a9565b61027a565b61025e565b610202565b6101d4565b610146565b60009103126100d257565b600080fd5b60005b8381106100ea5750506000910152565b81810151838201526020016100da565b61011b61012460209361012e9361010f815190565b80835293849260200190565b958691016100d7565b601f01601f191690565b0190565b6020808252610143929101906100fa565b90565b346100d2576101563660046100c7565b61016d6101616104bb565b60405191829182610132565b0390f35b6001600160a01b031690565b6001600160a01b0381165b036100d257565b9050359061019c8261017d565b565b80610188565b9050359061019c8261019e565b91906040838203126100d257610143906101cb818561018f565b936020016101a4565b346100d25761016d6101f06101ea3660046101b1565b90610596565b60405191829182901515815260200190565b346100d2576102123660046100c7565b61016d61021d6104fd565b6040515b9182918290815260200190565b90916060828403126100d257610143610247848461018f565b93610255816020860161018f565b936040016101a4565b346100d25761016d6101f061027436600461022e565b916105a1565b346100d25761028a3660046100c7565b61016d6102956104e2565b6040519182918260ff909116815260200190565b346100d25761016d6101f06102bf3660046101b1565b906105da565b906020828203126100d2576101439161018f565b346100d25761016d61021d6102ef3660046102c5565b610545565b346100d2576103043660046100c7565b61016d6101616104c5565b346100d25761016d6101f06103253660046101b1565b90610653565b346100d25761016d6101f06103413660046101b1565b90610561565b91906040838203126100d25761014390610361818561018f565b9360200161018f565b346100d25761016d61021d610380366004610347565b90610576565b634e487b7160e01b600052602260045260246000fd5b90600160028304921680156103bc575b60208310146103b757565b610386565b91607f16916103ac565b805460009392916103e36103d98361039c565b8085529360200190565b916001811690811561043557506001146103fc57505050565b61040f9192939450600052602060002090565b916000925b8184106104215750500190565b805484840152602090930192600101610414565b92949550505060ff1916825215156020020190565b90610143916103c6565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761048c57604052565b610454565b9061019c6104ab926104a260405190565b9384809261044a565b038361046a565b61014390610491565b61014360366104b2565b61014360376104b2565b6104dc6101436101439290565b60ff1690565b61014360126104cf565b6101439081565b61014390546104ec565b61014360356104f3565b61014390610171906001600160a01b031682565b61014390610507565b6101439061051b565b9061053790610524565b600052602052604060002090565b61055c61014391610554600090565b50603361052d565b6104f3565b6105719190336107bb565b6107bb565b600190565b6101439161059161055c92610589600090565b50603461052d565b61052d565b610571919033610939565b61057192919061056c833383610a07565b634e487b7160e01b600052601160045260246000fd5b919082018092116105d557565b6105b2565b61057191906105f333926105ee8385610576565b6105c8565b91610939565b1561060057565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b61057191906105f333926106678385610576565b610673828210156105f9565b0390565b6101716101436101439290565b61014390610677565b1561069457565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b156106ee57565b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b1561074657565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b6101436101436101439290565b906101436101436107b79261079a565b9055565b6107fa6107e96107cb6000610684565b6101716001600160a01b0382166001600160a01b038616141561068d565b6001600160a01b03841614156106e7565b6108456108328360336105916108238861081761055c898661052d565b6106738282101561073f565b61082d878461052d565b6107a7565b61083f8561012e836104f3565b906107a7565b61088561087b6108757fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93610524565b93610524565b9361022160405190565b0390a3565b1561089157565b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b156108e957565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b6109786109676109496000610684565b6101716001600160a01b0382166001600160a01b038616141561088a565b6001600160a01b03841614156108e2565b61098b8361082d8461059185603461052d565b61088561087b6108757f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92593610524565b156109c257565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b90610a128183610576565b6000198103610a22575b50505050565b610a36936105f391610673828210156109bb565b38808080610a1c56fea264697066735822122053907ba0e8bf2dc8bc222ce604f927722f22e87339728419dc926ac3302c716564736f6c63430008120033";

type ERC20UpgradeableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20UpgradeableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Upgradeable__factory extends ContractFactory {
  constructor(...args: ERC20UpgradeableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20Upgradeable> {
    return super.deploy(overrides || {}) as Promise<ERC20Upgradeable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC20Upgradeable {
    return super.attach(address) as ERC20Upgradeable;
  }
  override connect(signer: Signer): ERC20Upgradeable__factory {
    return super.connect(signer) as ERC20Upgradeable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20UpgradeableInterface {
    return new utils.Interface(_abi) as ERC20UpgradeableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Upgradeable {
    return new Contract(address, _abi, signerOrProvider) as ERC20Upgradeable;
  }
}
